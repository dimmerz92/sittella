package main

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"

	"github.com/dimmerz92/sittella"
	"github.com/dimmerz92/sittella/auth"
	"github.com/dimmerz92/sittella/database"
	"github.com/dimmerz92/sittella/mailer"
	"github.com/dimmerz92/sittella/sessions"
	_ "github.com/mattn/go-sqlite3"
	"github.com/wneessen/go-mail"
)

// Queries would be something like the *Queries generated by sqlc or your own custom queries.
type Queries struct{}

// constructor would be something like the New func generated by sqlc or your own custom function.
func constructor(db *sql.DB) *Queries { return &Queries{} }

func main() {
	// create the database
	db, err := database.NewDatabase(":memory:", "sqlite3", constructor)
	if err != nil {
		panic(err)
	}

	// configure an instantiate the app
	app := sittella.New(sittella.Config[*Queries]{
		Database: db,
		Mailer: &mailer.DefaultMailer{
			Host: "smtp.example.com",
			From: "hello@example.com",
			Opts: []mail.Option{mail.WithPort(123456)},
		},
		AuthStore:    auth.NewMemoryAuth(auth.MemoryAuthConfig{Sliding: true}),
		SessionStore: sessions.NewMemorySessionStore(sessions.MemorySessionStoreConfig{}),
		BeforeStart:  func() { println("do a thing before the app starts") },
		BeforeStop:   func() { println("do a thing before the app stops") },
	})
	defer app.Stop(context.Background())

	// serve routes
	app.GET("/", func(c *sittella.Context[*Queries]) error {
		var data string
		if err := c.Auth().Get(&data); err != nil { // gets the auth cookie if it exists
			fmt.Println(err)
		} else {
			fmt.Println(data) // prints the data mapped to the key in the auth cookie
		}
		return c.String(http.StatusOK, "hello, world!")
	})

	app.GET("/login", func(c *sittella.Context[*Queries]) error {
		// Do some log in logic
		if err := c.Auth().Set("some arbitrary user data"); err != nil { // sets arbitrary data into an auth cookie
			fmt.Println(err)
		}
		return c.Redirect(http.StatusSeeOther, "/")
	})

	app.GET("/logout", func(c *sittella.Context[*Queries]) error {
		// Do some logout logic
		if err := c.Auth().Delete(); err != nil { // revokes the session cookie and deletes the data
			fmt.Println(err)
		}
		return c.Redirect(http.StatusSeeOther, "/")
	})

	// start the app
	if err := app.Start(8000); err != nil {
		panic(err)
	}
}
